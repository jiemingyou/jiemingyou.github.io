accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
)
splitLayout(
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# Side panel
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("file1", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
)
),
mainPanel(h3("Image output"))
)
)
# server.R ----
server <- function(input, output, session) {}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# Side panel
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("file1", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
mainPanel(h2("Image output"))
)
)
# server.R ----
server <- function(input, output, session) {}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# Side panel
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("file1", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
mainPanel(h2("Image output"))
)
)
# server.R ----
server <- function(input, output, session) {}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# Side panel
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
mainPanel(h2("Image output")),
imageOutput("imgoutput")
)
)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
img <- readJPEG(input$img, native = FALSE)
list(src = img,
alt = "Source image")
}, deleteFile = TRUE)
}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {
# A plot of fixed size
output$imgoutput <- renderImage({
img <- readJPEG(input$img, native = FALSE)
list(src = img,
alt = "Source image")
}, deleteFile = TRUE)
}
# Run the app ----
shinyApp(ui, server)
library(jpeg)
source("convolution_funcs.R")
library(shiny)
library(jpeg)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {
# A plot of fixed size
output$imgoutput <- renderImage({
img <- readJPEG(input$img, native = FALSE)
list(src = img,
alt = "Source image")
}, deleteFile = TRUE)
}
# Run the app ----
shinyApp(ui, server)
?readJPEG
source("convolution_funcs.R")
library(shiny)
library(jpeg)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {
# A plot of fixed size
output$imgoutput <- renderImage({
img <- readJPEG(input$img, native = FALSE)
list(src = img,
alt = "Source image")
}, deleteFile = TRUE)
}
# Run the app ----
shinyApp(ui, server)
source("convolution_funcs.R")
library(shiny)
library(jpeg)
install.packages(rsconnect)
# ui.R ----
ui <- fluidPage(
# SITE TITLE
titlePanel(h1("Kernel convolutions")),
sidebarLayout(
position = "left",
# SIDE PANEL
sidebarPanel(
h3("Upload an image"),
# Input: Select a file ----
fileInput("img", "(supported filetypes: jpg or png)",
multiple = FALSE,
accept = c("image/*")),
# Horizontal line
tags$hr(),
h3("Define a kernel"),
splitLayout(
textInput("11", label = "", value = "1"),
textInput("12", label = "", value = "1"),
textInput("13", label = "", value = "1")
),
splitLayout(
textInput("21", label = "", value = "1"),
textInput("22", label = "", value = "1"),
textInput("23", label = "", value = "1")
),
splitLayout(
textInput("31", label = "", value = "1"),
textInput("32", label = "", value = "1"),
textInput("33", label = "", value = "1")
),
# Horizontal line
tags$hr(),
actionButton("button", "Convolve!")
),
# MAIN PANEL ----
mainPanel(
h2("Image output"),
imageOutput("imgoutput")
)
)
)
# server.R ----
server <- function(input, output, session) {
}
# Run the app ----
shinyApp(ui, server)
